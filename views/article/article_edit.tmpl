{% extends ../base_medium.bs4 %}

{% block include_css %}
    <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/medium-editor@latest/dist/css/medium-editor.min.css" type="text/css" media="screen" charset="utf-8">

    <!-- Font Awesome for awesome icons. You can redefine icons used in a plugin configuration -->
    <link href="http://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet">

    <!-- Medium Editor IMage Plugin CSS -->
    <!--link rel="stylesheet" href="/static/medium-editor/css/medium-editor.min.css"-->
    <!--link rel="stylesheet" href="bower_components/medium-editor/dist/css/themes/default.css" -->
    <link rel="stylesheet" href="/static/medium-editor/css/medium-editor-insert-plugin.min.css">
    <link rel="stylesheet" href="{{  static_url("medium-editor/css/themes/beagle.css")}}">
    <link rel="stylesheet" href="{{ static_url("side-comments/side-comments.css")}}">
    <link rel="stylesheet" href="{{ static_url("side-comments/themes/default-theme.css")}}">
    {% end %}

{% block include_js %}
    <!--script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.serializeJSON/2.8.1/jquery.serializejson.js"></script-->
    <script src="//cdn.jsdelivr.net/npm/medium-editor@latest/dist/js/medium-editor.min.js"></script>

    <!-- Medium Editor Image Plugin JS -->
    <!--script src="bower_components/jquery/dist/jquery.min.js"></script-->
    <!--script src="/static/medium-editor/js/medium-editor.js"></script-->
   
    <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.0.0/handlebars.runtime.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-sortable/0.9.12/jquery-sortable-min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/9.12.0/js/vendor/jquery.ui.widget.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/9.12.0/js/jquery.iframe-transport.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/blueimp-file-upload/9.12.0/js/jquery.fileupload.js"></script>
    <script src="/static/medium-editor/js/medium-editor-insert-plugin.js"></script>
    <script src="{{ static_url("medium-editor/js/medium-button.min.js")}}"></script>
    <script src="{{ static_url("js/chance.js")}}"></script>
    <script src="{{ static_url("side-comments/side-comments.js")}}"></script>

{% end %}



{% block document_ready %}

        
        $("#message-div").hide();
        $(".btn-delete").click(function(e)
            {
                console.log( "btn_delete: " + $(e.currentTarget).attr("value"));
                var id = $(e.currentTarget).attr("value");
                var data = jsonString = JSON.stringify({"id" : id});
                console.log(data)
                var curr_tr = $("#"+id);
                curr_tr.fadeOut();     
                
                
            });
    
        $("#edit_form").submit(function()
            {
                var mysave = $('#texteditor').html();
                $('#text').val(mysave);
                var data = $("#edit_form").serializeJSON();
                console.log( data );
                var jsonString = JSON.stringify(data);
                console.log(jsonString);
                $.ajax({
                        url : "/{{handler_name}}/{{data.get('id')}}",
                        type: "PUT",
                        data : jsonString,
                        success: function(data, textStatus, jqXHR)
                        {
                            $("#message-div").hide();
                            var od = JSON.stringify(data);
                            var obj = JSON.parse(data);
                            //alert("success sending put: " + data + textStatus)
                            console.log(obj);
                            $("#message-div").attr("class", "alert alert-success alert-dismissible fade show");
                            $("#message-div").html(`
                                <button type='button' class='close' data-dismiss='alert' aria-label='Close'>
                                <span aria-hidden='true'>&times;</span>
                                </button>
                                <strong>Well done!</strong> You successfully updated the article: `
                            );
                            $("#message-div").show();
                            
                        },
                        error: function (jqXHR, textStatus, errorThrown)
                        {
                            console.log(jqXHR);
                            $("#message-div").hide();
                            $("#message-div").attr("class", "alert alert-error");
                            $("#message-div").text("Problems");
                            $("#message-div").show();
                        }
                    });  
            //setTimeout(function() {
            //    $('#message-div').fadeOut('fast');
            //}, 10000); // <-- time in milliseconds
            return false;   
        });

        function replace_p_by_br( html, tag = "<span>"){
            //
            // cleans all <p></p> in a given html and replaces them by <br>
            // 
            // create a pseudo element
            var $dataWrapper = $(tag);
            $dataWrapper.html(html);
            // now we have the selected html inside a <tag>
            $dataWrapper.find("p").each( function(){
                var htmlInsideColumn = $(this).html();
                var convertedHtml = htmlInsideColumn + " <br >";
                $(this).after(convertedHtml);   //let's place the converted html right after this column element.
                $(this).detach(); 
            });
            // return the new html
            return $dataWrapper.html();
        }


        var editor = new MediumEditor('.editable', {
                toolbar: {
                    buttons: ['bold', 'italic', 'underline', 'anchor', 'h1', 'h2', 'h3', 'h4',
                    , 'orderedlist', 'unorderedlist', 'quote',"html", "pop", 'code', "python", "js", "commentable"]
                },
                extensions: {
                    // compact
                    'bb':  new MediumButton({label:'BOLD', start:'<b>', end:'</b>'}),
                    'hh2': new MediumButton({label:'h2', start:'<h2>', end:'</h2>'}),
            
                   // expanded
                   'warning': new MediumButton({
                      label: '<i class="fa fa-exclamation-triangle"></i>',
                      start: '<div class="warning">',
                      end:   '</div>'
                   }),
                
                // see: https://stackoverflow.com/questions/36211473/jquery-replace-selected-html-tags-in-string-with-value
                // with JavaScript
                   'pop': new MediumButton({
                      label:'POP !p',
                      action: function(html, mark, parent){
                            // just replace all <p></p> by <br> 
                            return replace_p_by_br(html);
                        }
                    }),
                    'python': new MediumButton({
                        label:'python',
                        action: function(html, mark, parent){
                            // replace all <p></p> by <br> and add the correct language class
                            var out =  '<pre><code class="python">' + replace_p_by_br(html) + '</code></pre>';
                            return out;
                        }
                    }),
                    'js': new MediumButton({
                        label:'js',
                        action: function(html, mark, parent){
                            // replace all <p></p> by <br> and add the correct language class
                            var out =  '<pre><code class="javascript">' + replace_p_by_br(html) + '</code></pre>';
                            return out;
                        }
                    }),
                    'code': new MediumButton({
                        label:'code',
                        action: function(html, mark, parent){
                            // replace all <p></p> by <br> and add the correct language class
                            var out =  '<pre><code>' + replace_p_by_br(html) + '</code></pre>';
                            return out;
                        }
                    }),
                    'commentable': new MediumButton({
                        label:'commentable',
                        action: function(html, mark, parent){
                            console.log(html);
                            // replace all <p></p> by <br> and add the correct language class
                            //var out =  '<pre><code>' + replace_p_by_br(html) + '</code></pre>';
                            var id = chance.string({ length: 8, pool : 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%&*()[]'});
                            var out = '<p data-section-id="' + id + '" class="commentable-section">' + html + '</p>'
                            console.log(out);
                            return out;
                        }
                    })
                }
                
            }
        );

        $('.editable').mediumInsert({
            editor: editor, // (MediumEditor) Instance of MediumEditor
            enabled: true, // (boolean) If the plugin is enabled
            addons: { // (object) Addons configuration
                images: { // (object) Image addon configuration
                    label: '<span class="fa fa-camera"></span>', // (string) A label for an image addon
                    uploadScript: null, // DEPRECATED: Use fileUploadOptions instead
                    deleteScript: null, // (string) A relative path to a delete script 'delete.php'
                    deleteMethod: 'POST',
                    fileDeleteOptions: {}, // (object) extra parameters send on the delete ajax request, see http://api.jquery.com/jquery.ajax/
                    preview: true, // (boolean) Show an image before it is uploaded (only in browsers that support this feature)
                    captions: true, // (boolean) Enable captions
                    captionPlaceholder: 'Type caption for image (optional)', // (string) Caption placeholder
                    autoGrid: 3, // (integer) Min number of images that automatically form a grid
                    formData: {}, // DEPRECATED: Use fileUploadOptions instead
                    fileUploadOptions: { // (object) File upload configuration. See https://github.com/blueimp/jQuery-File-Upload/wiki/Options
                        url: '/image/add/{{data.get("id")}}', // (string) A relative path to an upload script
                        acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i // (regexp) Regexp of accepted file types
                    },
                    styles: { // (object) Available image styles configuration
                        wide: { // (object) Image style configuration. Key is used as a class name added to an image, when the style is selected (.medium-insert-images-wide)
                            label: '<span class="fa fa-align-justify"></span>', // (string) A label for a style
                            added: function ($el) {}, // (function) Callback function called after the style was selected. A parameter $el is a current active paragraph (.medium-insert-active)
                            removed: function ($el) {} // (function) Callback function called after a different style was selected and this one was removed. A parameter $el is a current active paragraph (.medium-insert-active)
                        },
                        left: {
                            label: '<span class="fa fa-align-left"></span>'
                        },
                        right: {
                            label: '<span class="fa fa-align-right"></span>'
                        },
                        grid: {
                            label: '<span class="fa fa-th"></span>'
                        }
                    },
                    actions: { // (object) Actions for an optional second toolbar
                        remove: { // (object) Remove action configuration
                            label: '<span class="fa fa-times"></span>', // (string) Label for an action
                            clicked: function ($el) { // (function) Callback function called when an action is selected
                                var $event = $.Event('keydown');
                                
                                $event.which = 8;
                                $(document).trigger($event);   
                            }
                        }
                    },
                    messages: {
                        acceptFileTypesError: 'This file is not in a supported format: ',
                        maxFileSizeError: 'This file is too big: '
                    },
                    uploadCompleted: function ($el, data) {
                        console.log("Successfully uploaded");
                    }, // (function) Callback function called when upload is completed
                    uploadFailed: function (uploadErrors, data) {
                        console.log("Upload Error: " + uploadErrors);
                        comsole.log("*****************");
                        comsole.log(data);

                    } // (function) Callback function called when upload failed
                },
                embeds: { // (object) Embeds addon configuration
                    label: '<span class="fa fa-youtube-play"></span>', // (string) A label for an embeds addon
                    placeholder: 'Paste a YouTube, Vimeo, Facebook, Twitter or Instagram link and press Enter', // (string) Placeholder displayed when entering URL to embed
                    captions: true, // (boolean) Enable captions
                    captionPlaceholder: 'Type caption (optional)', // (string) Caption placeholder
                    oembedProxy: 'http://medium.iframe.ly/api/oembed?iframe=1', // (string/null) URL to oEmbed proxy endpoint, such as Iframely, Embedly or your own. You are welcome to use "http://medium.iframe.ly/api/oembed?iframe=1" for your dev and testing needs, courtesy of Iframely. *Null* will make the plugin use pre-defined set of embed rules without making server calls.
                    styles: { // (object) Available embeds styles configuration
                        wide: { // (object) Embed style configuration. Key is used as a class name added to an embed, when the style is selected (.medium-insert-embeds-wide)
                            label: '<span class="fa fa-align-justify"></span>', // (string) A label for a style
                            added: function ($el) {}, // (function) Callback function called after the style was selected. A parameter $el is a current active paragraph (.medium-insert-active)
                            removed: function ($el) {} // (function) Callback function called after a different style was selected and this one was removed. A parameter $el is a current active paragraph (.medium-insert-active)
                        },
                        left: {
                            label: '<span class="fa fa-align-left"></span>'
                        },
                        right: {
                            label: '<span class="fa fa-align-right"></span>'
                        }
                    },
                    actions: { // (object) Actions for an optional second toolbar
                        remove: { // (object) Remove action configuration
                            label: '<span class="fa fa-times"></span>', // (string) Label for an action
                            clicked: function ($el) { // (function) Callback function called when an action is selected
                                var $event = $.Event('keydown');
                                
                                $event.which = 8;
                                $(document).trigger($event);   
                            }
                        }
                    }
                }
            }
        });

        console.log("done with article_edit js");
        // hljs.initHighlightingOnLoad();
        // $('pre').each(function(i, block) {
        //     hljs.highlightBlock(block);
        //  });
{% end %}

{% block content %}
    <!-- Begin page content -->
    <div class="container">
        <div class="jumbotron jumbotron-fluid">
            <div class="container">
                <h2>Edit article</h2>
                <a href="/article/{{data.get('id')}}">Show article: {{data.get('id')}}</a>
            </div>
        </div>
        <br>
        <hr>

        <div id="message-div" role="alert">    
        </div>

        <form id="edit_form" name="edit_form">
            
            <div class="form-group row">
                <label for="author_id" class="col-2 col-form-label">Author Id</label>
                <div class="col-10">
                    <input  type="text" class="form-control" name="author_id" id="author_id" 
                        value="{{data.get("author_id")}}" />
                </div>
            </div>
            
            <div class="form-group row">
                <label for="read_time" class="col-2 col-form-label">Read time</label>
                <div class="col-10">
                    <input  type="text" class="form-control" name="read_time" id="read_time" 
                        value="{{data.get("read_time")}}" />
                </div>
            </div>

            <div class="form-group row">
                <label for="published_date" class="col-2 col-form-label">Date</label>
                <div class="col-10">
                    <input  type="text" class="form-control" name="published_date" id="published_date" 
                        value="{{data.get("published_date")}}" />
                </div>
            </div>

            <div class="form-group row">
                <label for="title" class="col-2 col-form-label">Titel</label>
                <div class="col-10">
                    <input  type="text" class="form-control" name="title" id="title" 
                        value="{{data.get("title")}}" />
                </div>
            </div>    
            
            <div class="form-group row">
                <label for="teaser" class="col-2 col-form-label">Teaser</label>
                <div class="col-10">
                    <input  type="text" class="form-control" name="teaser" id="teaser" 
                        value="{{data.get("teaser")}}" />
                </div>
            </div> 

            <div class="form-group row">
                <label for="votes" class="col-2 col-form-label">Votes</label>
                <div class="col-10">
                    <input  type="text" class="form-control" name="votes" id="votes" 
                        value="{{data.get("votes")}}" />
                </div>
            </div>   

            <div class="form-group row">
                <label for="text" class="col-2 col-form-label">Text</label>
                <input type="hidden" name="text" id="text" val="">
                <div class="col-10 editable" id="texteditor">
                        {% raw data.get("text") %}
                </div>
            </div>    
          
            <div class="form-group row">
                <label class="col-sm-2">Featured</label>
                <div class="col-sm-10">
                    <div class="form-check">
                    <label class="form-check-label">
                        <input class="form-check-input" type="hidden" name="featured" id="featured" value="0" />
                        <input class="form-check-input" type="checkbox" name="featured" id="featured"  value="1" 
                        {% if  data.get("featured") == True %}
                            checked="checked"
                        {% end %}
                         /> featured article ?
                    </label>
                    </div>
                </div>
            </div>

            <div class="form-group row">
                <label for="title" class="col-2 col-form-label">Tags</label>
                <div class="col-10">
                        <!--input  type="text" class="form-control" name="tags[]" id="tags" --> 
                        <input  type="text" class="form-control" name="tags" id="tags" 
                    {% if len(data.get("tags")) == 0 %}
                            value="" />
                    {% elif len(data.get("tags")) > 0 %}                        
                            value="{{ ' '.join( data.get("tags") ) }}" />
                    {% end %}
                </div>
            </div>    
            
            <a href="/{{base_route_rest}}" class="btn btn-primary">Back to {{handler_name}}.list</a>
            <input type="submit" class="btn btn-success" id="submit_edit_form" value="Update {{handler_name}}">

        </form>
        <br>

        
    </div>
{% end %}